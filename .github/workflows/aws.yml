name: Packer Workflow

on:
  pull_request:
    types:
      - closed



jobs:
   if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Zip webapp
      run: cd .. && zip -r webapp.zip webapp && cd webapp

    - name : Setup env
      run : echo "DIALECT=mysql4.0.0" >> ./.env

    - name: Initialize Packer Template
      run: cd packer && packer init .

    ##- name: Build AMI
    ##  run: cd packer && packer build ami.pkr.hcl

    - name: Install aws cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2

    - name: Setup demo credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.DEMO_AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.DEMO_AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1

    - name: Get Latest image id
      run: |
       ami_id=$(aws ec2 describe-images \
       --query "reverse(sort_by(Images,&CreationDate))[0].ImageId" --output text )
       echo IMAGE_ID=$ami_id >> $GITHUB_ENV


    - name: Get Template version
      run: |
       template_version=($aws ec2 describe-launch-template-versions \
       --query "reverse(sort_by(CreateTime))[0].VersionNumber" --output text")
       echo Version_Number=$template_version >>$GITHUB_ENV


    - name: Get Template id
      run: |
       template_id=($aws ec2 describe-launch-template \
       --query "reverse(sort_by(CreateTime))[0].LaunchTemplateId --output text")
       echo LAUNCH_TEMPLATE_ID=$template_id >>$GITHUB_ENV


    - name: Create a new Launch Template version with the latest AMI ID for the autoscaling group
      run: aws ec2 create-launch-template-version \
        --ami-id ${{env.IMAGE_ID}} \
        --launch-template-id ${{env.LAUNCH_TEMPLATE_ID}} \
        --source-version ${{env.Version_Number}}
        --launch-template-data '{"ImageId":"ami_id"}'

    - name: Get Autoscaling group name
      run: |
       asg_name=($aws describe-auto-scaling-groups \
       --filters "Name=Name,Values=asg_group*" --output text")
       echo AUTOSCALING_NAME=$asg_name >>$GITHUB_ENV


    - name: Refresh Instance by Autoscaling group
      run: aws ec2 start-instance-refresh
        --auto-scaling-group-name ${{env.AUTOSCALING_NAME}}